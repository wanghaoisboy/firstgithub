<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.11.1.0">
<procedure name="main">
<interface/>
<body>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">ImageFiles := []</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">ImageFiles[0] := 'C:/Users/Eax098/Desktop/20240425/5.bmp'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="2">ImageFiles[1] := 'C:/Users/Eax098/Desktop/20240425/6.bmp'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="3">ImageFiles[2] := 'C:/Users/Eax098/Desktop/20240425/7.bmp'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="4">ImageFiles[3] := 'C:/Users/Eax098/Desktop/20240425/8.bmp'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="5">ImageFiles[4] := 'C:/Users/Eax098/Desktop/20240425/9.bmp'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="6">ImageFiles[5] := 'C:/Users/Eax098/Desktop/20240425/10.bmp'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="7">ImageFiles[6] := 'C:/Users/Eax098/Desktop/20240425/3.bmp'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="8">ImageFiles[7] := 'C:/Users/Eax098/Desktop/20240425/4.bmp'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<l>    get_image_size (Image, Width, Height)</l>
<l>rft_generic (Image, ImageFFT, 'to_freq', 'none', 'complex', Width)</l>
<l>gen_gauss_filter (ImageGauss, 8, 8, 0, 'n', 'rft', Width, Height)</l>
<l>convol_fft (ImageFFT, ImageGauss, ImageConvol)</l>
<l>rft_generic (ImageConvol, IlluminationImage, 'from_freq', 'none', 'byte', Width)</l>
<l>sobel_amp (IlluminationImage, EdgeAmplitude1, 'sum_abs', 3)</l>
<l>sobel_amp (IlluminationImage, EdgeAmplitude, 'sum_abs', 9)</l>
<l>threshold (EdgeAmplitude, Region, 6, 255)</l>
<l>    sobel_amp (Image, EdgeAmplitude1, 'sum_abs', 3)</l>
<l>    threshold (EdgeAmplitude1, Region1, 10, 255)</l>
<l>    erosion_circle (Region1, RegionErosion, 3)</l>
<l>    connection (Region1, ConnectedRegions1)</l>
<c>    </c>
<l>    select_shape (ConnectedRegions1, SelectedRegions1, 'convexity', 'and', 0, 0.5)</l>
<c>    </c>
<c> </c>
<c>* 将图像转换为灰度</c>
<l>rgb1_to_gray (Image, GrayImage)</l>
<c></c>
<l>equ_histo_image (GrayImage, ImageEquHisto)</l>
<l>gray_histo (ImageEquHisto, ImageEquHisto, AbsoluteHisto1, RelativeHisto1)</l>
<c></c>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>dev_set_color ('red')</l>
<l>gen_region_histo (Region, AbsoluteHisto1, 255, 255, 1)</l>
<l>dev_set_color ('green')</l>
<c> </c>
<c>* 对图像进行傅里叶变换以分析频</c>
<c> </c>
<c>* 使用高通滤波器去除低频部分，保留高频部分</c>
<l>fourier_transform_inv (FImage, ImageFFT, 'sqrt', 'dc_center')</l>
<c> </c>
<c>* 显示结果</c>
<l>visualize_spectrum (FImage, 'complex', -1, 'false', 'spectrum_periodic')</l>
<c></c>
<l>rgb1_to_gray(Image, GrayImage)</l>
<c> </c>
<l>fft_image(GrayImage, ImageFFT)</l>
<l>get_image_size(ImageFFT, Width, Height)</l>
<l>gen_rectangle2 (Rectangle, Height/2.0, Width/2.0, 3.1415926/2.0, 200, 2.5)</l>
<l>gen_rectangle2 (Rectangle1, Height/2.0, Width/2.0, 3.1415926/2.0, 10, 2.5)</l>
<l>difference (Rectangle, Rectangle1, RegionDifference)</l>
<l>paint_region (RegionDifference, ImageFFT, ImageResult, 0, 'fill')</l>
<l>fft_image_inv (ImageResult, ImageFFTInv)</l>
<c></c>
<c></c>
<l>    median_image (Image, ImageMedian, 'circle', 1, 'mirrored')</l>
<l>    sobel_amp (Image, EdgeAmplitude, 'sum_abs', 3)</l>
<l>    scale_image (Image, ImageScaled, 3, 0)</l>
<l>    threshold (ImageScaled, Region2, 10, 225)</l>
<l>    closing_circle (Region2, RegionClosing, 15)</l>
<l>    connection (RegionClosing, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 150, 99999999)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>*     大津法</c>
<l>*     binary_threshold (ImageScaled, Region2, 'max_separability', 'dark', UsedThreshold)</l>
<c>       **分水岭</c>
<l>*        watersheds (ImageScaled, Image, ImageMean0)</l>
<c>       **直方图</c>
<c>       </c>
<c>    </c>
<c></c>
<l>*     gauss_filter (ImageScaled, ImageGauss, 9)</l>
<l>*     mean_image (ImageScaled, ImageMean0, 7,7)</l>
<l>*     sobel_amp (ImageMean0, EdgeAmplitude1, 'sum_abs', 7)</l>
<l>*     mean_image (ImageScaled, ImageMean1, 37,37)</l>
<l>*      mean_image (ImageScaled, ImageMean2, 87,87)</l>
<l>*      local_threshold (ImageMean0, ImageMean0, 'adapted_std_deviation', 'dark', [], [])</l>
<l>*     dyn_threshold (ImageMean2, ImageMean1, RegionDynThresh, 5, 'light')</l>
<c>  </c>
<l>*     threshold (ImageMean1, Region1, 0, 100)</l>
<c>    </c>
<l>*     local_threshold (ImageScaled, Region, 'adapted_std_deviation', 'dark', [], [])</l>
<c>    </c>
<l>  endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
